// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sensors.Domain;

#nullable disable

namespace Sensors.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240725181805_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Sensors.Domain.Entities.FishCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("SensorStateId")
                        .HasColumnType("int");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SensorStateId");

                    b.ToTable("FishCounts");
                });

            modelBuilder.Entity("Sensors.Domain.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PositionX")
                        .HasColumnType("float");

                    b.Property<double>("PositionY")
                        .HasColumnType("float");

                    b.Property<double>("PositionZ")
                        .HasColumnType("float");

                    b.Property<int>("SensorNumber")
                        .HasColumnType("int");

                    b.Property<double>("WaterTemperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Sensors.Domain.Entities.SensorState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("WaterTemperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorStates");
                });

            modelBuilder.Entity("Sensors.Domain.Entities.FishCount", b =>
                {
                    b.HasOne("Sensors.Domain.Entities.SensorState", "SensorState")
                        .WithMany("FishCounts")
                        .HasForeignKey("SensorStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorState");
                });

            modelBuilder.Entity("Sensors.Domain.Entities.SensorState", b =>
                {
                    b.HasOne("Sensors.Domain.Entities.Sensor", "Sensor")
                        .WithMany("SensorStates")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Sensors.Domain.Entities.Sensor", b =>
                {
                    b.Navigation("SensorStates");
                });

            modelBuilder.Entity("Sensors.Domain.Entities.SensorState", b =>
                {
                    b.Navigation("FishCounts");
                });
#pragma warning restore 612, 618
        }
    }
}
